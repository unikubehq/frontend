query ProjectsQuery($limit: Int, $offset: Int) {
    allProjects(limit: $limit, offset: $offset) {
        totalCount
        results {
            title,
            repositoryStatus,
            description,
            currentCommit,
            currentCommitDateTime,
            id,
            organization {
                id
            },
            members {
                user {
                    id,
                    givenName,
                    familyName,
                    avatarImage,
                    email
                },
                role
            }
            decks {
                title,
            }
            sops {
                ... on AWSKMSNode {
                    title,
                    id
                },
                ... on PGPKeyNode {
                    title,
                    id
                },
            }
        }
    }
}

query ProjectDetailQuery($id: UUID) {
    project(id: $id) {
        created,
        title,
        description,
        organization {
            id
        },
        id,
        specRepository,
        specRepositoryBranch,
        repositoryStatus,
        specType,
        currentCommit,
        currentCommitDateTime,
        accessUsername,
        accessToken,
        clusterSettings {
            port,
            id
        }
        members {
            user {
                id,
                givenName,
                familyName,
                avatarImage,
                email
            },
            role
        }
        decks {
            title,
            description,
            type,
            namespace,
            id,
            fileInformation {
                path,
                encrypted
            }
            deployments {
                id
                title
                description
                isSwitchable
                ports
            }
            environment {
                title,
                description,
                id,
                deck{
                    id
                },
                type,
                valuesPath,
                namespace,
                valuesType
                valueSchema
                helmOverrides {
                    overrides
                }
                sopsCredentials {
                    ... on AWSKMSNode {
                    title,
                    id,
                },
                ... on PGPKeyNode {
                    title,
                    id,
                },
                },
            }

        },
        sops {
            ... on AWSKMSNode {
                title
                description
                accessKey
                secretAccessKey
                id
            },
            ... on PGPKeyNode {
                title
                description
                privateKey
                id
            },
        }

    }
}

query ProjectDetailOtherProjectsQuery {
    allProjects(limit: 1000) {
        results {
            title,
            id,
            currentCommitDateTime,
            decks {
                title
            }
        }
    }
}

mutation CreateProject(
  $title: String!
  $description: String!
  $specRepository: String!
  $specType: SpecicifactionTypeEnum!
  $accessUsername: String
  $accessToken: String
  $specRepositoryBranch: String!
  $organization: UUID!
) {
  createUpdateProject(
    input: {
      title: $title
      description: $description
      specRepository: $specRepository
      specType: $specType
      specRepositoryBranch: $specRepositoryBranch
      accessUsername: $accessUsername
      accessToken: $accessToken
      organization: $organization
    }
  ) {
    project {
      title,
      id
    }
  }
}

mutation UpdateProject(
  $title: String!
  $description: String!
  $specRepository: String!
  $specType: SpecicifactionTypeEnum!
  $accessUsername: String
  $accessToken: String
  $specRepositoryBranch: String!
  $id: UUID!
  $organization: UUID!
) {
  createUpdateProject(
    input: {
      title: $title
      description: $description
      specRepository: $specRepository
      specType: $specType
      specRepositoryBranch: $specRepositoryBranch
      accessUsername: $accessUsername
      accessToken: $accessToken
      organization: $organization
      id: $id
    }
  ) {
    project {
      title,
      id
    }
  }
}


mutation DeleteProject($id: UUID) {
  deleteProject(id: $id) {
    ok
  }
}

mutation createUpdateSops(
    $title: String!
    $description: String
    $sopsType: SOPSTypeEnum!
    $project: UUID!
    $secret1: String
    $secret2: String
    $secret3: String
    $id: UUID
) {
    createUpdateSops(
        sopsData: {
            title: $title
            description: $description
            sopsType: $sopsType
            project: $project
            secret1: $secret1
            secret2: $secret2
            secret3: $secret3
        },
        id: $id
    ) {
        ok
    }
}

mutation createUpdateEnvironment(
    $title: String!
    $description: String
    $type: String!
    $deck: ID!
    $sopsCredentials: ID
    $valuesPath: String
    $id: ID
    $namespace: String!
) {
    createUpdateEnvironment(
        input: {
                title: $title
                description: $description
                type: $type
                deck: $deck
                sopsCredentials: $sopsCredentials
                valuesPath: $valuesPath
                namespace: $namespace
                id: $id
        }
    ) {
        environment {
            title,
            id
        },
        errors {
            field,
            messages
        }
    }
}

mutation CreateProjectMemberMutation(
    $id: UUID,
    $user: UUID,
    $role: ProjectMemberRoleEnum,
) {
    createProjectMember(
        user: $user,
        id: $id,
        role: $role
    ) {
        ok
    }
}

mutation DeleteProjectMemberMutation(
    $id: UUID,
    $user: UUID,
) {
    deleteProjectMember(
        user: $user,
        id: $id,
    ) {
        ok
    }
}

mutation UpdateClusterSettings(
    $input: UpdateClusterSettingsInput!
) {
    updateClusterSettings(input: $input) {
        clusterSettings {
            port
        }
    }
}

mutation DeleteSops(
    $input: UUID!
) {
    deleteSops(id: $input) {
        ok
    }
}

mutation UpdateProjectRepositoryMutation($id: UUID!) {
    updateProjectRepository(id: $id) {
        ok
    }
}

mutation CreateUpdateHelmOverridesMutation($environmentId: UUID!, $overrides: String!) {
    createUpdateHelmOverrides(environmentId: $environmentId, overrides: $overrides) {
        ok,
    }
}
