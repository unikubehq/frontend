schema {
  query: Query
  mutation: Mutation
}

directive @composedGraph(version: Int!) on SCHEMA

directive @graph(name: String!, url: String!) on SCHEMA

directive @key(fields: String!, graph: String!) on OBJECT

directive @owner(graph: String!) on OBJECT

directive @provides(fields: String!) on FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

directive @resolve(graph: String!) on FIELD_DEFINITION

type AWSKMSNode {
  accessKey: String!
  description: String
  id: UUID!
  secretAccessKey: String!
  title: String!
}

type ClusterSettingsNode {
  id: ID!
  port: Int!
}

type CreateOrganizationMemberInvitation {
  ok: Boolean
}

type CreateProjectMember {
  ok: Boolean
}

input CreateUpdateEnvironmentInput {
  clientMutationId: String
  deck: ID!
  description: String
  id: ID
  namespace: String!
  sopsCredentials: ID
  title: String!
  type: String!
  valuesPath: String
  valuesType: String
}

type CreateUpdateEnvironmentPayload {
  clientMutationId: String
  environment: EnvironmentNode
  errors: [ErrorType]
}

type CreateUpdateHelmOverrides {
  ok: Boolean
}

input CreateUpdateOrganizationInput {
  avatarImage: String
  clientMutationId: String
  description: String
  id: ID
  onTrial: Boolean
  title: String!
}

type CreateUpdateOrganizationPayload {
  clientMutationId: String
  errors: [ErrorType]
  organization: OrganizationNode
}

type CreateUpdateProject {
  project: ProjectNode
}

type CreateUpdateSOPS {
  ok: Boolean
}

scalar DateTime

type DeckNode {
  deployments(level: String, switchable: Boolean): [DeploymentNode]
  description: String
  dirPath: String!
  environment(level: String): [EnvironmentNode]
  fileInformation: [FileInformationNode]
  hash: String!
  id: UUID!
  namespace: String!
  project: ProjectNode!
  title: String!
  type: String!
}

type DeckNodePage {
  limit: Int
  offset: Int
  resultCount: Int
  results: [DeckNode]
  totalCount: Int
}

type DeleteAvatar {
  ok: Boolean
}

type DeleteEnvironment {
  ok: Boolean
}

type DeleteOrganizationMember {
  ok: Boolean
}

type DeleteProject {
  ok: Boolean
}

type DeleteProjectMember {
  ok: Boolean
}

type DeleteSOPS {
  ok: Boolean
}

type DeploymentNode {
  description: String
  environment: EnvironmentNode!
  id: UUID!
  isSwitchable: Boolean!
  ports: String!
  title: String!
}

type EnvironmentNode {
  deck: DeckNode!
  deployments: [DeploymentNode!]!
  description: String
  helmOverrides: HelmOverridesNode
  id: UUID!
  namespace: String!
  sopsCredentials: SOPSProviderNode
  specsUrl: String
  title: String!
  type: EnvironmentType!
  valueSchema: String
  valuesPath: String!
  valuesType: EnvironmentValuesType
}

enum EnvironmentType {
  LOCAL
  REMOTE
}

enum EnvironmentValuesType {
  DIR
  FILE
}

type ErrorType {
  field: String!
  messages: [String!]!
}

type FileInformationNode {
  encrypted: Boolean
  path: String
}

type HelmOverridesNode {
  id: ID!
  overrides: String!
}

scalar JSONString

type Mutation {
  answerInvitation(accepted: Boolean, id: UUID): UpdateOrganizationMemberInvitation
  createInvitation(email: String, id: UUID): CreateOrganizationMemberInvitation
  createProjectMember(id: UUID, role: ProjectMemberRoleEnum, user: UUID): CreateProjectMember
  createUpdateEnvironment(input: CreateUpdateEnvironmentInput!): CreateUpdateEnvironmentPayload
  createUpdateHelmOverrides(environmentId: UUID, overrides: String): CreateUpdateHelmOverrides
  createUpdateOrganization(input: CreateUpdateOrganizationInput!): CreateUpdateOrganizationPayload
  createUpdateProject(input: ProjectInputType!): CreateUpdateProject
  createUpdateSops(id: UUID, sopsData: SOPSInputType!): CreateUpdateSOPS
  deleteAvatar(id: UUID): DeleteAvatar
  deleteEnvironment(id: UUID): DeleteEnvironment
  deleteProject(id: UUID): DeleteProject
  deleteProjectMember(id: UUID, user: UUID): DeleteProjectMember
  deleteSops(id: UUID): DeleteSOPS
  removeOrganizationMember(id: UUID, user: UUID): DeleteOrganizationMember
  revokeInvitation(id: UUID): RevokeOrganizationMemberInvitation
  updateClusterSettings(input: UpdateClusterSettingsInput!): UpdateClusterSettingsPayload
  updateOrganizationMember(id: UUID, role: OrganizationMemberRoleEnum, user: UUID): UpdateOrganizationMember
  updateProjectRepository(id: UUID): UpdateProjectRepository
}

type OrganizationInvitationNode {
  email: String!
  id: UUID!
  organization: OrganizationNode!
}

type OrganizationInvitationNodePage {
  limit: Int
  offset: Int
  resultCount: Int
  results: [OrganizationInvitationNode]
  totalCount: Int
}

type OrganizationMember {
  role: String
  user: UserNode
}

enum OrganizationMemberRoleEnum {
  admin
  member
}

type OrganizationNode {
  avatarImage: String
  created: DateTime!
  description: String
  id: UUID!
  members: [OrganizationMember]
  title: String!
}

type OrganizationNodePage {
  limit: Int
  offset: Int
  resultCount: Int
  results: [OrganizationNode]
  totalCount: Int
}

type PGPKeyNode {
  description: String
  id: UUID!
  privateKey: String!
  title: String!
}

input ProjectInputType {
  accessToken: String
  accessUsername: String
  description: String
  id: UUID
  organization: UUID!
  specRepository: String!
  specRepositoryBranch: String!
  specType: SpecicifactionTypeEnum!
  title: String!
}

type ProjectMember {
  role: String
  user: UserNode
}

enum ProjectMemberRoleEnum {
  admin
  member
}

type ProjectNode {
  accessToken: String
  accessUsername: String!
  clusterSettings: ClusterSettingsNode
  created: DateTime!
  currentCommit: String!
  currentCommitDateTime: DateTime
  decks: [DeckNode!]!
  description: String
  id: UUID!
  keycloakData: JSONString!
  members: [ProjectMember]
  organization: OrganizationNode
  repositoryStatus: ProjectRepositoryStatus!
  sops: [SOPSProviderNode]
  specRepository: String!
  specRepositoryBranch: String
  specType: ProjectSpecType!
  title: String!
}

type ProjectNodePage {
  limit: Int
  offset: Int
  resultCount: Int
  results: [ProjectNode]
  totalCount: Int
}

enum ProjectRepositoryStatus {
  AUTH_FAILED
  BRANCH_UNAVAILABLE
  CLONING
  CLONING_FAILED
  CLONING_PENDING
  CLONING_SUCCESSFUL
  OK
  PARSING_FAILED
  UNKNOWN
}

enum ProjectSpecType {
  HELM
}

type Query {
  allDecks(limit: Int, offset: Int, organizationId: UUID, projectId: UUID): DeckNodePage
  allOrganizationInvitations(id: UUID!, limit: Int, offset: Int): OrganizationInvitationNodePage
  allOrganizations(limit: Int, offset: Int): OrganizationNodePage
  allProjects(limit: Int, offset: Int, organizationId: UUID): ProjectNodePage
  deck(id: UUID, slug: String): DeckNode
  environment(id: UUID): EnvironmentNode
  organization(id: UUID!): OrganizationNode
  project(id: UUID, slug: String): ProjectNode
  user(id: UUID): UserNode
  userInvitations(limit: Int, offset: Int): OrganizationInvitationNodePage
}

type RevokeOrganizationMemberInvitation {
  ok: Boolean
}

input SOPSInputType {
  description: String
  project: UUID!
  secret1: String
  secret2: String
  secret3: String
  sopsType: SOPSTypeEnum!
  title: String!
}

union SOPSProviderNode = AWSKMSNode | PGPKeyNode

enum SOPSTypeEnum {
  aws
  pgp
}

enum SpecicifactionTypeEnum {
  helm
}

scalar UUID

input UpdateClusterSettingsInput {
  clientMutationId: String
  id: ID
  port: Int!
  project: ID!
}

type UpdateClusterSettingsPayload {
  clientMutationId: String
  clusterSettings: ClusterSettingsNode
  errors: [ErrorType]
}

type UpdateOrganizationMember {
  ok: Boolean
}

type UpdateOrganizationMemberInvitation {
  ok: Boolean
}

type UpdateProjectRepository {
  ok: Boolean
}

type UserNode {
  avatarImage: String
  email: String
  familyName: String
  givenName: String
  id: UUID!
  name: String
}
